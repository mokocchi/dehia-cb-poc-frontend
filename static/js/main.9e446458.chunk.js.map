{"version":3,"sources":["redux/actions/index.js","redux/reducers/auth.js","redux/index.js","icons.js","components/UI/LoadSpinner.js","config.js","utils/utils.js","components/UI/Menu.js","components/Main/LoginButton.js","components/Main/loggedIn.js","utils/APIClient.js","utils/tokenManager.js","components/Main/MetricsPanel.js","components/Main/CollectPanel.js","components/Main/ResultsPanel.js","components/Main/ChartsPanel.js","components/Main/Homepage.js","components/Main/HomepageContainer.js","components/UI/MenuContainer.js","screens/Main/Homepage.js","components/Main/Login.js","screens/Main/Login.js","App.js","index.js"],"names":["API_USER_FOUND","API_USER_EXPIRED","LOADING_API_USER","loadingApiUser","type","API_USER_LOGGED_OUT","apiUserLoggedOut","INITIAL_STATE","name","isLoading","combineReducers","auth","state","action","user","IconsCSS","FontAwesome_ttf","Entypo_ttf","Ionicons_ttf","MaterialIcons_ttf","MaterialCommunityIcons_ttf","style","document","createElement","styleSheet","cssText","appendChild","createTextNode","head","LoadSpinner","text","Form","Control","as","Button","variant","disabled","Spinner","animation","size","role","aria-hidden","API_HOST","API_BASE_URL","TOKEN_AUTH_URL","expired","expiresAt","Date","now","Menu","loggedIn","logout","Navbar","className","bg","Brand","onClick","LoginButton","pingGateway","a","axios","then","res","status","setState","loading","catch","error","console","log","sessionStorage","getItem","removeItem","conditionFunction","timeout","Promise","poll","resolve","setTimeout","_","waitFor","this","Row","Col","Alert","href","to","Component","mapStateToProps","WrappedComponent","connect","props","APIClient","post","token","response","error_code","data","accessToken","expiresIn","expires_in","setAuth","uri","parameters","json","validAuth","alert","tokenManager","expireUser","headers","url","method","body","user_message","authorizedRequest","object","stringify","loginFromStoredTokenId","JSON","getToken","authorizedGetRequest","authorizedPostRequest","authorizedDeleteRequest","store","client","dispatch","tokenString","storedAuth","parse","reauthIfNeeded","storeUserIfValidJWT","jwtContents","JWT","jwtData","jwt","decode","exp","verifyJWTSignature","storeApiUser","login","window","location","pathname","setItem","search","getCollectStatus","postResourceSwitch","deleteResourceSwitch","getResultsStatus","getResults","postCircuitBreakerSwitch","deleteCircuitBreakerSwitch","getCircuitBreakerStatus","MetricsPanel","metrics","cb","Card","Header","Body","testStarted","value","step","max","md","map","item","index","stopTest","startTest","collectVariant","collect","CollectPanel","cStatus","cError","cLoading","checked","onChangeCollect","font","color","resultsVariant","results","resultsLoading","ResultsPanel","rStatus","rError","rLoading","rResultsLoading","rData","rBreakerEnabled","circuitBreakerEnabled","rBreakerLoading","circuitBreakerLoading","onClickRetrieve","onChangeCircuitBreaker","generateLabels","labels","label","push","ChartsPanel","datasets","options","scales","yAxes","ticks","suggestedMin","suggestedMax","showLines","onClickClear","Homepage","getRandomColor","i","Math","floor","random","HomepageContainer","stop","elapsedTimes","length","time1","failed","cached","time2","interval","getTime","avg","reduce","x","y","min","toFixed","fill","backgroundColor","borderColor","developer_message","onChangeBreaker","enable","enableCircuitBreaker","disableCircuitBreaker","removeResourceSwitch","createResourceSwitch","loadCollectStatus","loadResultsStatus","loadStatus","MenuContainer","match","params","Container","padding","Login","history","LoginScreen","App","basename","marginTop","path","exact","component","User","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","reducer","initialize","loadApiUser","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9e446458.chunk.js","sourcesContent":["export const API_USER_FOUND = \"API_USER_FOUND\"\n\nexport function apiUserFound(user) {\n  return {\n    type: API_USER_FOUND,\n    user\n  }\n}\n\nexport const API_USER_EXPIRED = \"API_USER_EXPIRED\"\n\nexport function apiUserExpired() {\n  return {\n    type: API_USER_EXPIRED\n  }\n}\n\nexport const LOADING_API_USER = \"LOADING_API_USER\"\n\nexport function loadingApiUser() {\n  return {\n    type: LOADING_API_USER\n  }\n}\n\nexport const API_USER_LOGGED_OUT = \"API_USER_LOGGED_OUT\"\n\nexport function apiUserLoggedOut() {\n  return {\n    type: API_USER_LOGGED_OUT\n  }\n}","import { API_USER_FOUND, API_USER_EXPIRED, LOADING_API_USER, API_USER_LOGGED_OUT } from \"../actions\";\n\nconst INITIAL_STATE = {\n    name: null,\n    isLoading: false\n}\n\nexport default function auth(state = INITIAL_STATE, action) {\n    switch (action.type) {\n        case API_USER_FOUND:\n            return {\n                ...state,\n                name: action.user.name,\n                isLoading: false\n            }\n        case API_USER_EXPIRED:\n            return INITIAL_STATE;\n        case API_USER_LOGGED_OUT:\n            return INITIAL_STATE;\n        case LOADING_API_USER:\n            return {\n                ...INITIAL_STATE,\n                isLoading: true\n            }\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\n\nimport auth from './reducers/auth';\n\nexport default combineReducers({\n    auth\n})","/* eslint-disable camelcase */\nimport FontAwesome_ttf from 'react-web-vector-icons/fonts/FontAwesome.ttf';\nimport Entypo_ttf from 'react-web-vector-icons/fonts/Entypo.ttf';\nimport Ionicons_ttf from 'react-web-vector-icons/fonts/Ionicons.ttf';\nimport MaterialIcons_ttf from 'react-web-vector-icons/fonts/MaterialIcons.ttf';\nimport MaterialCommunityIcons_ttf from 'react-web-vector-icons/fonts/MaterialCommunityIcons.ttf';\n\nconst IconsCSS = `\n@font-face {\n  src: url(${FontAwesome_ttf});\n  font-family: FontAwesome;\n}\n@font-face {\n  src: url(${Entypo_ttf});\n  font-family: Entypo;\n}\n@font-face {\n    src: url(${Ionicons_ttf});\n    font-family: Ionicons;\n}\n@font-face {\n    src: url(${MaterialIcons_ttf});\n    font-family: MaterialIcons;\n}\n@font-face {\n  src: url(${MaterialCommunityIcons_ttf});\n  font-family: MaterialCommunityIcons;\n}\n`;\n\nconst style = document.createElement('style');\nstyle.type = 'text/css';\nif (style.styleSheet) style.styleSheet.cssText = IconsCSS;\nelse style.appendChild(document.createTextNode(IconsCSS));\n\ndocument.head.appendChild(style);","import React from 'react';\nimport { Spinner, Button, Form } from 'react-bootstrap'\n\nfunction LoadSpinner({text}) {\n    return (\n        <Form.Control as={Button} variant=\"Light\" disabled>\n            <Spinner\n                as=\"span\"\n                animation=\"border\"\n                size=\"sm\"\n                role=\"status\"\n                aria-hidden=\"true\"\n            />\n            {text || \"Loading...\"}\n        </Form.Control>\n    )\n}\n\nexport default LoadSpinner","export const API_HOST = 'https://dehia-cb-poc-gateway.herokuapp.com'\n\nexport const API_BASE_URL = `${API_HOST}/api/v1.0`; \n\nexport const TOKEN_AUTH_URL = `${API_HOST}/login`;\n\nexport const REQUEST_COUNT = 20;","import jwt from 'jsonwebtoken';\n\nexport function expired(expiresAt) {\n    return Date.now() > expiresAt;\n}\n\nexport function expiresAt(expiresIn) {\n    return Date.now() + expiresIn;\n}\n\nexport const waitFor = (conditionFunction, timeout = 400) => {\n    const poll = resolve => {\n        if (conditionFunction()) resolve();\n        else setTimeout(_ => poll(resolve), timeout);\n    }\n    return new Promise(poll);\n}\n\nexport const verifyJWTSignature = (JWT) => {\n    if(JWT) {\n        try {\n            const jwtData = jwt.decode(JWT);\n            return {\n                name: jwtData.name, exp: jwtData.exp\n            }        \n        } catch (error) {\n            return null;\n        }\n    } else {\n        return null;\n    }\n}","import React from 'react';\nimport { Button, Navbar } from 'react-bootstrap';\n\nconst Menu = ({ loggedIn, logout }) => <Navbar className=\"navbar\" bg=\"primary\">\n    <Navbar.Brand>Circuit Breaker PoC {loggedIn && \"- Dashboard\"}</Navbar.Brand>\n    {loggedIn &&\n        <Button onClick={logout} className=\"float-right\" variant=\"outline-light\">Logout</Button>\n    }\n</Navbar>\n\nexport default Menu;","import axios from 'axios';\nimport React from 'react';\nimport { Component } from 'react';\nimport { Alert, Button, Col, Row } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { API_HOST } from '../../config';\nimport { waitFor } from '../../utils/utils';\nimport LoadSpinner from '../UI/LoadSpinner';\nimport Menu from '../UI/Menu';\n\n//ping gateway\n\n\nclass LoginButton extends Component {\n    constructor() {\n        super();\n        const error = sessionStorage.getItem(\"error\");\n        sessionStorage.removeItem(\"error\");\n        this.state = {\n            loading: true,\n            error\n        }\n    }\n\n    pingGateway = async () => {\n        axios(API_HOST).then(res => {\n            if (res.status === 200) {\n                this.setState({\n                    loading: false\n                })\n\n            }\n        }).catch(error => console.log(error));\n    }\n\n    componentDidMount() {\n        waitFor(_ => this.pingGateway() && (this.state.loading === false), 5000).then(_ =>\n            this.setState({\n                loading: false\n            })\n        )\n    }\n\n    render() {\n        return (\n            <div>\n                <Menu loggedIn={false} />\n                {this.state.loading ? <div>\n                    <LoadSpinner text=\"Starting...\" />\n                </div>\n                    : <div className=\"App\">\n                        <Row>\n                            <Col>\n                                {(this.state.error &&\n                                    (this.state.error === \"login_failed\") ?\n                                        <Alert variant=\"danger\">Login failed. See the API response in the network panel for details.</Alert>\n                                        : ((this.state.error === \"seats_taken\") &&\n                                            <Alert variant=\"warning\">Max users reached. Please stand by.</Alert>\n                                        )\n                                )}\n                                <p>This is a proof of concept for the <a href=\"https://docs.microsoft.com/en-us/azure/architecture/patterns/circuit-breaker\">Circuit Breaker</a> pattern. <br />\n                                Log in to see the dashboard.<br />\n                                You have 15 minutes.\n                                </p>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <Link className=\"loginButton\" to=\"/login\">\n                                    <Button variant={\"outline-dark\"}>\n                                        Login\n            </Button>\n                                </Link>\n                            </Col>\n                        </Row>\n                    </div>\n                }\n            </div>)\n    }\n}\n\nexport default LoginButton;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport LoadSpinner from \"../UI/LoadSpinner\";\nimport LoginButton from \"./LoginButton\";\n\nfunction mapStateToProps(state) {\n    return {\n        auth: state.auth\n    }\n}\nconst loggedIn = (WrappedComponent) => {\n    return connect(mapStateToProps)((props) =>\n        (props.auth.isLoading) ?\n            <LoadSpinner />\n            :\n            props.auth.name ?\n                < WrappedComponent {...props} />\n                :\n                <LoginButton {...props} />\n    )\n}\nexport default loggedIn;","import { TOKEN_AUTH_URL, API_BASE_URL } from \"../config\";\nimport { expired, expiresAt } from \"./utils\";\nimport axios from 'axios';\nimport tokenManager from \"./tokenManager\";\n\nexport default class APIClient {\n    setAuth(auth) {\n        this.auth = auth;\n    }\n\n    async login() {\n        return axios.post(TOKEN_AUTH_URL, {\n                //TODO: add ID\n                token: true\n        }).then(\n            response => {\n                if (response.error_code) {\n                    console.log(response);\n                } else {\n                    if (response.data) {\n                        const auth = {\n                            token: response.data.accessToken,\n                            expiresAt: expiresAt(response.data.expires_in)\n                        }\n                        this.setAuth(auth);\n                        return auth;\n                    }\n                    else {\n                        console.log(\"Auth error\")\n                        return null\n                    }\n                }\n            }\n        ).catch(error => {\n            throw error;\n        })\n    }\n\n\n    validAuth(auth) {\n        return auth && auth.token && !expired(auth.expiresAt);\n    }\n\n    async authorizedRequest(uri, parameters = {}, json = true) {\n        if (!this.validAuth(this.auth)) {\n            console.log(\"Time's up, please log in again...\")\n            alert(\"Time is up! Please log in again\");\n            tokenManager.expireUser();\n        }\n        parameters.headers = {\n            \"Authorization\": \"Bearer \" + this.auth.token,\n            \"Content-Type\": json ? \"application/json\" : \"\"\n        }\n        try {\n            return await axios({ url: API_BASE_URL + uri, method: parameters.method, data: parameters.body || {}, headers: parameters.headers });\n        } catch (error) {\n            if (error.response.data) {\n                return error.response.data\n            } else {\n                return {\n                    user_message: \"There was an error\", error_code: 0\n                }\n            }\n        }\n    }\n\n    async authorizedGetRequest(uri) {\n        return this.authorizedRequest(uri);\n    }\n\n    async authorizedPostRequest(uri, object = {}, stringify = true) {\n        if (!this.validAuth(this.auth)) {\n            this.loginFromStoredTokenId();\n        }\n        return this.authorizedRequest(uri, {\n            body: stringify ? JSON.stringify(object) : object,\n            method: 'POST'\n        }, stringify)\n    }\n\n    authorizedPutRequest(uri, object, stringify = true) {\n        const token = this.getToken();\n        return this.authorizedRequest(token, uri, {\n            body: stringify ? JSON.stringify(object) : object,\n            method: 'PUT'\n        })\n    }\n\n    authorizedPatchRequest(uri, object, stringify = true) {\n        const token = this.getToken();\n        return this.authorizedRequest(token, uri, {\n            body: stringify ? JSON.stringify(object) : object,\n            method: 'PATCH'\n        })\n    }\n\n    authorizedDeleteRequest(uri) {\n        if (!this.validAuth(this.auth)) {\n            this.loginFromStoredTokenId();\n        }\n        return this.authorizedRequest(uri, { method: 'DELETE' });\n    }\n\n    getCollectStatus() {\n        return this.authorizedGetRequest('/collect-status');\n    }\n\n    postResourceSwitch() {\n        return this.authorizedPostRequest('/switch')\n    }\n\n    deleteResourceSwitch() {\n        return this.authorizedDeleteRequest('/switch')\n    }\n\n    getResultsStatus() {\n        return this.authorizedGetRequest('/results-status');\n    }\n\n    getResults() {\n        return this.authorizedGetRequest('/results');\n    }\n\n    postCircuitBreakerSwitch() {\n        return this.authorizedPostRequest('/circuit-breaker-switch');\n    }\n\n    deleteCircuitBreakerSwitch() {\n        return this.authorizedDeleteRequest('/circuit-breaker-switch')\n    }\n\n    getCircuitBreakerStatus() {\n        return this.authorizedGetRequest('/circuit-breaker-switch')\n    }\n}","import { apiUserFound, apiUserExpired, loadingApiUser } from '../redux/actions';\nimport { expired, verifyJWTSignature } from './utils';\nimport APIClient from './APIClient';\n\nexport default class tokenManager {\n\n    static store = null;\n\n    static initialize(store) {\n        this.store = store;\n        this.client = new APIClient();\n    }\n\n    static loadApiUser() {\n        this.store.dispatch(loadingApiUser());\n        const tokenString = sessionStorage.getItem('dehia.auth');\n        const storedAuth = tokenString ? JSON.parse(tokenString) : null;\n        if (storedAuth && storedAuth.token) {\n            this.reauthIfNeeded(storedAuth).then(\n                auth => {\n                    if (auth) {\n                        this.storeUserIfValidJWT(auth)\n                    } else {\n                        console.log(\"Couldn't fetch login data\")\n                        this.expireUser()\n                    }\n                }\n            ).catch(_ => this.expireUser())\n        } else {\n            console.log(\"Token not found\")\n            this.expireUser()\n        }\n    }\n\n    static storeUserIfValidJWT(auth) {\n        const token = auth.token;\n        const jwtContents = verifyJWTSignature(token);\n        if (jwtContents) {\n            const storedAuth = { token, expiresAt: jwtContents.exp * 1000 }\n            this.client.setAuth(storedAuth);\n            this.storeApiUser(storedAuth);\n            this.store.dispatch(apiUserFound({\n                name: jwtContents.name,\n            }))\n            return true;\n        } else {\n            console.log(\"JWT not valid\");\n            this.expireUser();\n            return false;\n        }\n    }\n\n    static async reauthIfNeeded(token) {\n        if (expired(token.expiresAt)) {\n            this.login()\n                .then(response => {\n                    console.log(response);\n                    if (response.data) {\n                        this.storeUserIfValidJWT(response.data);\n                    } else {\n                        if (response.error_code) {\n                            console.log(response.user_message);\n                        } else {\n                            console.log(\"Unknown error\");\n                        }\n                        this.expireUser();\n                    }\n                }).catch(error => {\n                    if (error.response.error_code) {\n                        console.log(error.response.user_message);\n                    } else {\n                        console.log(\"Unknown error\");\n                    }\n                    this.expireUser();\n                });\n        } else {\n            return token;\n        }\n    }\n\n    static expireUser() {\n        if (window.location.pathname !== \"/callback\") {\n            sessionStorage.setItem('returnPath', window.location.pathname + window.location.search);\n            sessionStorage.removeItem('dehia.auth');\n        }\n        this.store.dispatch(apiUserExpired());\n    }\n\n    static storeApiUser(auth) {\n        sessionStorage.setItem('dehia.auth', JSON.stringify(auth));\n        this.client.setAuth(auth);\n    }\n\n    static async login() {\n        return await this.client.login()\n    }\n\n    static async authorizedGetRequest(uri) {\n        return await this.client.authorizedGetRequest(uri);\n    }\n\n    static getCollectStatus() {\n        return this.client.getCollectStatus();\n    }\n\n    static createResourceSwitch() {\n        return this.client.postResourceSwitch();\n    }\n\n    static removeResourceSwitch() {\n        return this.client.deleteResourceSwitch();\n    }\n\n    static getResultsStatus() {\n        return this.client.getResultsStatus();\n    }\n\n    static getResults() {\n        return this.client.getResults();\n    }\n\n    static enableCircuitBreaker() {\n        return this.client.postCircuitBreakerSwitch();\n    }\n\n    static disableCircuitBreaker() {\n        return this.client.deleteCircuitBreakerSwitch();\n    }\n\n    static getCircuitBreakerStatus() {\n        return this.client.getCircuitBreakerStatus();\n    }\n}\n","import React from 'react';\nimport { Button, Card, Row, Spinner, Col, Alert } from 'react-bootstrap';\n\nconst MetricsPanel = ({ metrics, cb }) => {\n    return (\n        <Card>\n            <Card.Header>\n                <h3>Test the current configuration</h3>\n            </Card.Header>\n            <Card.Body className=\"metrics-card-body\">\n                {!metrics.testStarted ? <Button onClick={cb.startTest} variant=\"primary\">Start test</Button>\n                    :\n                    <div>\n                        <Row>\n                            <Alert variant=\"info\">*Metrics are taken from the frontend, and includes the trip [frontend -&gt; gateway -&gt; service1 (-&gt;service2 -&gt; service1) -&gt; gateway -&gt; frontend]</Alert>\n                            <Col>\n                                <progress value={metrics.step} max=\"10\"> 32% </progress>\n                            </Col>\n                            <Col>\n                                {metrics.loading &&\n                                    <Spinner animation=\"border\" role=\"status\" />\n                                }\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12}>\n                                <ul>\n                                    {metrics.text.map((item, index) => <li key={index}>{item}</li>)}\n                                </ul>\n                            </Col>\n                            <Col>\n                                {metrics.loading ?\n                                    (<Button onClick={cb.stopTest} variant=\"danger\">Stop current test</Button>)\n                                    : (metrics.testStarted &&\n                                        <div>\n                                            <Button onClick={cb.startTest} variant=\"primary\">Restart test</Button>\n                                        </div>)\n                                }\n                            </Col>\n                        </Row>\n                    </div>\n                }\n            </Card.Body>\n        </Card>\n    )\n}\n\nexport default MetricsPanel;","import React from 'react';\nimport { Alert, Button, Card, Col, Row } from 'react-bootstrap';\nimport LoadSpinner from '../UI/LoadSpinner';\nimport Icon from 'react-web-vector-icons';\n\nconst collectVariant = (collect) => {\n    if (collect.loading) {\n        return \"secondary\";\n    }\n    if (collect.error) {\n        return \"danger\";\n    }\n    switch (collect.status) {\n        case \"OK\":\n            return \"success\";\n        case \"SUSPENDED\":\n            return \"warning\";\n        default:\n            return \"primary\";\n    }\n}\n\nconst CollectPanel = ({collect, cb}) => {\n    const cStatus = collect.status;\n    const cError = collect.error;\n    const cLoading = collect.loading;\n    return (<Card>\n        <Card.Header><h3>Collect Service</h3></Card.Header>\n        <Card.Body>\n            {cLoading ? <LoadSpinner /> : (\n                <Row>\n                    <Col>\n                        <Alert variant={collectVariant(collect)}>\n                            <Row>\n                                <Col>\n                                    Status: {cError ? cError : cStatus}\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n\n                                    {collect.checked ?\n                                        <Button className=\"float-right\" variant=\"success\" disabled={collect.disabled} onClick={_ => cb.onChangeCollect(true)}>\n                                            Enable Endpoint <Icon name=\"ethernet-cable\" font=\"MaterialCommunityIcons\" color=\"white\" size={\"1.5rem\"} />\n                                        </Button>\n                                        :\n                                        <Button className=\"float-right\" variant=\"warning\" disabled={collect.disabled} onClick={_ => cb.onChangeCollect(false)}>\n                                            Disable Endpoint <Icon name=\"ethernet-cable-off\" font=\"MaterialCommunityIcons\" color=\"white\" size={\"1.5rem\"} />\n                                        </Button>\n                                    }\n                                </Col>\n                            </Row>\n                        </Alert>\n                    </Col>\n                </Row>\n            )}\n        </Card.Body>\n    </Card>)\n}\n\nexport default CollectPanel;","import React from 'react';\nimport { Alert, Button, Card, Col, Row } from 'react-bootstrap';\nimport LoadSpinner from '../UI/LoadSpinner';\nimport Icon from 'react-web-vector-icons';\n\nconst resultsVariant = (results) => {\n    if (results.resultsLoading) {\n        return \"secondary\";\n    }\n    if (results.error) {\n        return \"danger\";\n    }\n    switch (results.status) {\n        case \"OK\":\n            return \"success\";\n        case \"SUSPENDED\":\n            return \"warning\";\n        default:\n            return \"primary\";\n    }\n}\n\nconst ResultsPanel = ({ results, cb }) => {\n    const rStatus = results.status;\n    const rError = results.error;\n    const rLoading = results.loading;\n    const rResultsLoading = results.resultsLoading;\n    const rData = results.data;\n    const rBreakerEnabled = results.circuitBreakerEnabled;\n    const rBreakerLoading = results.circuitBreakerLoading;\n\n    return (<Card>\n        <Card.Header><h3>Results Service</h3></Card.Header>\n        <Card.Body>\n            {rLoading ? <LoadSpinner /> : (\n                <Row>\n                    <Col>\n                        <Alert variant={resultsVariant(results)}>\n                            <Row>\n                                <Col>\n                                    Status: {rError ? rError : (rResultsLoading ? \"Fetching results...\" : rStatus)} <br />\n                                    Circuit Breaker: {rBreakerEnabled ? \"Enabled\" : \"Disabled\"} <br /><br />\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <Button onClick={cb.onClickRetrieve}>Retrieve results <Icon name=\"download\" font=\"MaterialCommunityIcons\" color=\"white\" size={\"1.5rem\"} /></Button>\n                                    {rBreakerLoading ? <LoadSpinner />\n                                        :\n                                        rBreakerEnabled ? <Button variant=\"secondary\" onClick={_ => cb.onChangeCircuitBreaker(false)} className=\"float-right\"> Disable Circuit Breaker <Icon name=\"pipe\" font=\"MaterialCommunityIcons\" color=\"white\" size={\"1.5rem\"} /></Button>\n                                            : <Button variant=\"warning\" onClick={_ => cb.onChangeCircuitBreaker(true)} className=\"float-right\"> Enable Circuit Breaker <Icon name=\"pipe-disconnected\" font=\"MaterialCommunityIcons\" color=\"white\" size={\"1.5rem\"} /></Button>\n                                    }\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>&nbsp;</Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    {rResultsLoading ? <LoadSpinner />\n                                        :\n                                        rData &&\n                                        <Card>\n                                            <Card.Header>\n                                                Results\n                                </Card.Header>\n                                            <Card.Body>\n\n                                                <ul>\n                                                    {rData.map((item, index) =>\n                                                        <li key={index}>{item}</li>\n                                                    )}\n                                                </ul>\n                                            </Card.Body>\n                                        </Card>\n                                    }\n                                </Col>\n                            </Row>\n                        </Alert>\n                    </Col>\n                </Row>\n            )}\n        </Card.Body>\n    </Card >)\n}\n\nexport default ResultsPanel;","import React from 'react';\nimport { Card, Row, Col, Button } from 'react-bootstrap';\nimport { Line } from 'react-chartjs-2';\nimport { REQUEST_COUNT } from '../../config';\n\nconst generateLabels = _ => {\n    const labels = [];\n    for (let index = 0; index < REQUEST_COUNT; index++) {\n        const label = `R${index + 1}`;\n        labels.push(label);\n    }\n    return labels;\n}\nconst ChartsPanel = ({ metrics, cb }) => {\n    return (\n        <Card>\n            <Card.Header>\n                <h3>Charts</h3>\n            </Card.Header>\n            <Card.Body>\n                <Row>\n                    <Col>\n                        <Line data={{\n                            labels: generateLabels(),\n                            datasets: metrics.datasets\n                        }} options={{\n                            scales: {\n                                yAxes: [{\n                                    ticks: {\n                                        suggestedMin: 0,\n                                        suggestedMax: 8000\n                                    }\n                                }]\n                            },\n                            showLines: true\n                        }\n                        } />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Button onClick={cb.onClickClear}>Clear</Button>\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    )\n}\n\nexport default ChartsPanel;","import React from 'react';\nimport { Alert, Col, Row } from 'react-bootstrap';\nimport MetricsPanel from './MetricsPanel';\nimport CollectPanel from './CollectPanel';\nimport ResultsPanel from './ResultsPanel';\nimport ChartsPanel from './ChartsPanel';\n\nfunction Homepage({ name, collect, results, metrics, cb }) {\n    return <div>\n        <Row>\n            <Col>\n                <h2>\n                    {name}'s Session\n                    </h2>\n                    <Alert variant=\"warning\">The services and gateway are hosted on Heroku - Please be patient the first time you open the app</Alert>\n            </Col>\n        </Row>\n        <Row>\n            <Col>\n                <CollectPanel collect={collect} cb={cb} />\n                <MetricsPanel metrics={metrics} cb={cb}/>\n            </Col>\n            <Col>\n                <ResultsPanel results={results} cb={cb} />\n                {metrics.data && <ChartsPanel metrics={metrics} cb={cb}/>}\n            </Col>\n        </Row>\n    </div>\n}\n\nexport default Homepage;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { REQUEST_COUNT } from '../../config';\nimport tokenManager from '../../utils/tokenManager';\nimport Homepage from './Homepage';\n\nfunction getRandomColor() {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n}\nclass HomepageContainer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            collect: {\n                loading: true,\n                error: null,\n                disabled: true,\n                checked: false,\n                status: null\n            },\n            results: {\n                loading: true,\n                resultsLoading: false,\n                error: null,\n                circuitBreakerEnabled: false,\n                circuitBreakerLoading: false,\n                data: null\n            },\n            metrics: {\n                testStarted: false,\n                step: 0,\n                text: [],\n                loading: false,\n                stop: false,\n                data: false,\n                datasets: []\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.loadStatus();\n    }\n\n    onClickClear = _ => {\n        const metrics = this.state.metrics;\n        metrics.data = false;\n        metrics.datasets = [];\n        this.setState({\n            metrics\n        })\n    }\n\n    stopTest = _ => {\n        const metrics = this.state.metrics;\n        metrics.stop = true;\n        metrics.loading = false;\n        this.setState({\n            metrics\n        })\n    }\n\n    startTest = async _ => {\n        let metrics = this.state.metrics;\n        metrics.testStarted = true;\n        metrics.stop = false;\n        metrics.step = 0;\n        this.setState({\n            metrics\n        })\n        let text = [];\n        const elapsedTimes = [];\n        if (this.state.collect.status === \"OK\") {\n            text[0] = \"Operation should be normal. Sending first request...\";\n        } else {\n            if (this.state.results.circuitBreakerEnabled) {\n                text[0] = \"Circuit breaker enabled. Sending first request...\"\n            } else {\n                text[0] = \"Circuit breaker disabled. Sending first request...\"\n            }\n        }\n        metrics = this.state.metrics;\n        metrics.text = text;\n        metrics.loading = true;\n        this.setState({\n            metrics\n        })\n        for (let index = 1; index <= REQUEST_COUNT; index++) {\n            if (this.state.metrics.stop) {\n                text[text.length] = \"Test stopped\";\n                metrics.text = text;\n                this.setState({\n                    metrics\n                })\n                return;\n            }\n            const time1 = Date.now();\n            let failed;\n            let cached = false;\n            try {\n                const response = await tokenManager.getResults();\n                if(response.data.results) {\n                    console.log(response.data.results[0])\n                    cached = response.data.results[0] === \"old\";\n                } else {\n                    failed = true;\n                }\n            } catch (e) {\n                console.log(e);\n                failed = true;\n            }\n            const time2 = Date.now();\n            const interval = new Date(time2).getTime() - new Date(time1).getTime();\n            text[index] = `Request ${index}. Elapsed time: ${interval}ms (${failed ? \"Failed\" : (cached ? \"Substitute results\" : \"Success\")})`;\n            elapsedTimes[index - 1] = interval;\n            metrics.step = index;\n            metrics.text = text;\n            this.setState({\n                metrics\n            })\n        }\n        const avg = elapsedTimes.reduce((x, y) => x + y) / REQUEST_COUNT;\n        const max = elapsedTimes.reduce((x, y) => (x > y) ? x : y);\n        const min = elapsedTimes.reduce((x, y) => (x < y) ? x : y);\n        metrics.loading = false;\n        text[text.length] = `Average: ${avg.toFixed(2)}ms.`;\n        text[text.length] = `Max time: ${max}ms. Min time: ${min}ms`;\n        metrics.text = text;\n        metrics.data = true;\n        console.log(\"Test result:\");\n        console.log(elapsedTimes);\n\n        const datasets = metrics.datasets;\n        const color = getRandomColor();\n        datasets[datasets.length] = {\n            label: `Test ${(datasets.length + 1)}`,\n            fill: false,\n            backgroundColor: color,\n            borderColor: color,\n            data: elapsedTimes.map((x, index) => { return { x: (index + 1), y: x } })\n        }\n        metrics.datasets = datasets;\n        this.setState({\n            metrics\n        });\n    }\n\n    onClickRetrieve = _ => {\n        const results = this.state.results;\n        results.resultsLoading = true;\n        this.setState({\n            results\n        })\n        tokenManager.getResults().then(response => {\n            if (response.data) {\n                if (response.error_code) {\n                    const results = this.state.results;\n                    results.error = response.user_message;\n                    results.resultsLoading = false;\n                    results.data = null;\n                    this.setState({\n                        results\n                    })\n                } else {\n                    const results = this.state.results;\n                    results.data = response.data.results;\n                    results.resultsLoading = false;\n                    results.error = null;\n                    this.setState({\n                        results\n                    })\n                }\n            } else {\n                const results = this.state.results;\n                if (response.developer_message) {\n                    results.error = response.developer_message;\n                } else {\n                    results.error = \"Unknown Error\";\n                }\n                results.data = null;\n                results.resultsLoading = false;\n                this.setState({\n                    results\n                })\n            }\n        })\n    }\n\n    onChangeBreaker = (enable) => {\n        if (enable) {\n            const results = this.state.results;\n            results.circuitBreakerLoading = true;\n            this.setState({\n                results\n            })\n            tokenManager.enableCircuitBreaker().then(res => {\n                if (res.status !== 200) {\n\n                    if (res.error_code) {\n                        console.log(res);\n                        this.setState({\n                            results: {\n                                circuitBreakerEnabled: false,\n                                circuitBreakerLoading: false,\n                                error: \"Error\"\n                            }\n                        })\n\n                    } else {\n                        console.log(res)\n                        const results = this.state.results;\n                        results.circuitBreakerLoading = false;\n                        results.error = \"Unknown Error\"\n                        this.setState({\n                            results\n                        })\n                    }\n                } else {\n                    this.setState({\n                        results: {\n                            circuitBreakerLoading: false,\n                            circuitBreakerEnabled: true,\n                            error: null,\n                            status: \"Circuit breaker enabled\"\n                        }\n                    })\n                }\n            }).catch(error => {\n                console.log(error)\n                this.setState({\n                    results: {\n                        circuitBreakerEnabled: false,\n                        circuitBreakerLoading: false,\n                        error: \"Error\"\n                    }\n                })\n            })\n        } else {\n            const results = this.state.results;\n            results.circuitBreakerLoading = true;\n            this.setState({\n                results\n            })\n            tokenManager.disableCircuitBreaker().then(response => {\n                if ((response.status !== 200) && (response.status !== 304)) {\n                    if (response.error_code) {\n                        this.setState({\n                            results: {\n                                error: response.user_message,\n                                loading: false,\n                            }\n                        })\n                    } else {\n                        console.log(response)\n                        const results = this.state.results;\n                        results.circuitBreakerLoading = false;\n                        results.error = \"Unknown Error\"\n                        this.setState({\n                            results\n                        })\n                    }\n                } else {\n                    const results = this.state.results;\n                    results.circuitBreakerLoading = false;\n                    results.circuitBreakerEnabled = false;\n                    results.error = null;\n                    this.setState({\n                        results\n                    })\n                }\n            }).catch(error => {\n                console.log(error)\n                this.setState({\n                    results: {\n                        circuitBreakerLoading: false,\n                        error: \"Unknown error\"\n                    }\n                })\n            })\n        }\n    }\n\n    onChangeCollect = (enable) => {\n        if (!this.state.collect.disabled) {\n            if (enable) {\n                const collect = this.state.collect;\n                collect.loading = true;\n                this.setState({\n                    collect\n                })\n                tokenManager.removeResourceSwitch().then(response => {\n                    if ((response.status !== 200) && (response.status !== 304)) {\n                        if (response.error_code) {\n                            this.setState({\n                                collect: {\n                                    error: response.user_message,\n                                    loading: false,\n                                }\n                            })\n                        } else {\n                            console.log(response)\n                            this.setState({\n                                collect: {\n                                    error: \"Unknown error\",\n                                    loading: false,\n                                }\n                            })\n                        }\n                    } else {\n                        this.setState({\n                            collect: {\n                                loading: false,\n                                error: null,\n                                disabled: false,\n                                checked: false,\n                                status: \"OK\"\n                            }\n                        })\n                    }\n                }).catch(error => {\n                    console.log(error)\n                    this.setState({\n                        collect: {\n                            loading: false,\n                            error: \"Error\"\n                        }\n                    })\n                })\n            } else {\n                const collect = this.state.collect;\n                collect.loading = true;\n                this.setState({\n                    collect\n                })\n                tokenManager.createResourceSwitch().then(res => {\n                    if (res.error_code) {\n                        console.log(res);\n                        this.setState({\n                            collect: {\n                                loading: false,\n                                error: \"Error\"\n                            }\n                        })\n                    } else {\n                        this.setState({\n                            collect: {\n                                loading: false,\n                                error: null,\n                                disabled: false,\n                                checked: true,\n                                status: \"SUSPENDED\"\n                            }\n                        })\n                    }\n                }).catch(error => {\n                    console.log(error)\n                    this.setState({\n                        collect: {\n                            loading: false,\n                            error: \"Error\"\n                        }\n                    })\n                })\n            }\n        }\n    }\n\n    loadCollectStatus = () => {\n        tokenManager.getCollectStatus().then(\n            response => {\n                if ((response.status !== 200) && (response.status !== 304)) {\n                    if (response.error_code) {\n                        this.setState({\n                            collect: {\n                                error: response.user_message,\n                                loading: false,\n                                disabled: true\n                            }\n                        })\n                    } else {\n                        this.setState({\n                            collect: {\n                                error: \"Unknown error\",\n                                loading: false,\n                                disabled: true\n                            }\n                        })\n                    }\n                } else {\n                    this.setState({\n                        collect: {\n                            status: response.data.status,\n                            loading: false,\n                            checked: response.data.status !== \"OK\",\n                            disabled: false\n                        }\n                    })\n                }\n            }\n        ).catch(error => {\n            console.log(error)\n        });\n    }\n\n    loadResultsStatus = () => {\n        tokenManager.getResultsStatus().then(\n            response => {\n                if ((response.status !== 200) && (response.status !== 304)) {\n                    if (response.error_code) {\n                        this.setState({\n                            results: {\n                                error: response.user_message,\n                                loading: false,\n                                disabled: true\n                            }\n                        })\n                    } else {\n                        console.log(response)\n                        this.setState({\n                            results: {\n                                error: \"Unknown error\",\n                                loading: false,\n                                disabled: true\n                            }\n                        })\n                    }\n                } else {\n                    this.setState({\n                        results: {\n                            status: response.data.status,\n                            loading: false,\n                            checked: response.status !== \"OK\",\n                            disabled: false\n                        }\n                    })\n                }\n            }\n        ).catch(error => {\n            console.log(error)\n        });\n\n        const results = this.state.results;\n        results.circuitBreakerLoading = true;\n        this.setState({\n            results\n        });\n        tokenManager.getCircuitBreakerStatus().then(\n            response => {\n                const results = this.state.results;\n                results.circuitBreakerLoading = false;\n                results.circuitBreakerEnabled = (response.data.status === \"enabled\")\n                this.setState({\n                    results\n                });\n            }\n        ).catch(error => {\n            console.log(error);\n            const results = this.state.results;\n            results.error = \"Unknown error\";\n            results.circuitBreakerLoading = false;\n            this.setState({\n                results\n            });\n        })\n    }\n\n    loadStatus = async () => {\n        this.loadCollectStatus();\n        this.loadResultsStatus();\n    }\n\n    render() {\n        return <Homepage\n            name={this.props.name}\n            collect={this.state.collect}\n            results={this.state.results}\n            metrics={this.state.metrics}\n            cb={{\n                onChangeCollect: this.onChangeCollect,\n                onClickRetrieve: this.onClickRetrieve,\n                onChangeCircuitBreaker: this.onChangeBreaker,\n                startTest: this.startTest,\n                stopTest: this.stopTest,\n                onClickClear: this.onClickClear\n            }}\n        />\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        name: state.auth.name\n    }\n}\nexport default connect(mapStateToProps)(HomepageContainer);","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { apiUserLoggedOut } from '../../redux/actions';\nimport Menu from './Menu';\n\nclass MenuContainer extends Component {\n    logout = _ => {\n        sessionStorage.removeItem('auth');\n        this.props.dispatch(apiUserLoggedOut());\n    }\n\n    render() {\n        return <Menu loggedIn={this.props.loggedIn} logout={this.logout}/>\n    }\n}\n\nexport default connect((state) => {return {}})(MenuContainer);","import React from 'react';\nimport HomepageContainer from '../../components/Main/HomepageContainer';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport MenuContainer from '../../components/UI/MenuContainer';\n\nconst Homepage = ({ match: { params } }) => {\n    return (\n        <div>\n            <MenuContainer loggedIn={true} />\n            <Container>\n                <Row>\n                    <Col style={{ padding: \"2em\" }}>\n                        <HomepageContainer />\n                    </Col>\n                </Row>\n            </Container >\n        </div>\n    )\n}\n\nexport default Homepage;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { loadingApiUser } from \"../../redux/actions\";\nimport tokenManager from \"../../utils/tokenManager\";\nimport LoadSpinner from \"../UI/LoadSpinner\";\nimport Menu from \"../UI/Menu\";\n\nclass Login extends Component {\n\n    componentDidMount() {\n        this.props.dispatch(loadingApiUser())\n        tokenManager.login().then(\n            auth => {\n                if (auth) {\n                    tokenManager.storeUserIfValidJWT(auth);\n                    this.props.history.push(\"/\")\n                } else {\n                    tokenManager.expireUser();\n                    sessionStorage.setItem(\"error\", \"login_failed\");\n                    this.props.history.push(\"/\");\n                }\n            }\n        ).catch(error => {\n            tokenManager.expireUser();\n            if (error.response) {\n                if (error.response.data.user_message === \"All seats taken!\") {\n                    sessionStorage.setItem(\"error\", \"seats_taken\");\n                    this.props.history.push(\"/\")\n                    return;\n                }\n            }\n            sessionStorage.setItem(\"error\", \"login_failed\");\n            this.props.history.push(\"/\")\n        })\n    }\n\n    render() {\n        return (<div>\n            <Menu loggedIn={false} />\n            <LoadSpinner />\n        </div>)\n    }\n}\n\nexport default connect((state) => { return {} })(Login);","import React from 'react';\nimport Login from '../../components/Main/Login';\n\nconst LoginScreen = ({ match: { params }, history }) => {\n    return <Login history={history}/>\n}\n\nexport default LoginScreen;","import React from 'react';\nimport { Route, HashRouter } from 'react-router-dom';\nimport { Container } from 'react-bootstrap'\n\nimport './App.css';\n\nimport User from './components/Main/loggedIn';\nimport Homepage from './screens/Main/Homepage';\nimport Login from './screens/Main/Login';\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <Container style={{ marginTop: '1em' }}>\n        <Route path=\"/\" exact component={User(Homepage)} />\n        <Route path=\"/login\" component={Login} />\n      </Container>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, compose } from 'redux'\nimport { Provider } from 'react-redux'\nimport reducer from './redux/index';\nimport './icons';\n\nimport App from './App';\nimport tokenManager from './utils/tokenManager';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n    reducer,\n    composeEnhancers()\n)\n\ntokenManager.initialize(store);\ntokenManager.loadApiUser();\n\nReactDOM.render(\n\n        <Provider store={store}>\n            <App />\n        </Provider>,\n        document.getElementById('root')\n)\n"],"sourceRoot":""}